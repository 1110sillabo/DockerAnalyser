version: "2"

# The docker-compose.yml file defines eigth services forming
# the multi-container Docker  application of DockerFinder
# The services are divided in three groups:
#               1) analysis: crawler, scanner, rabbitmq
#               2) discovery: webapp, software-server, sotware_db
#               3) storage::  images_server, images_db



services:

#####################################################
###############   ANALYSIS PHASE ####################
#####################################################
  crawler:
    build:
      context: analysis
      dockerfile: ./Dockerfile_crawler
    command: [crawl,'--save-url=/data/crawler/lasturl.txt',
                    '--amqp-url=amqp://guest:guest@rabbitmq:5672',
                    '--images-url=http://images_server:3000/api/images/',
                    '--queue=images',
                    '--si=10000',
                    '--random=True',
                    '--fp=1',
                    '--ps=100',
                    '--force-page=True'
                    ]
    #,'--si=100'] #, '--fp=100', '--ps=10']
    volumes:
        - /data/crawler/

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    restart: on-failure:3
    ports:
      - 8082:15672
    volumes:
      - /var/lib/rabbitmq

  scanner:
    build:
      context: analysis
      dockerfile: ./Dockerfile_scanner
    command: [run, '--images-url=http://images_server:3000/api/images/',
                  '--queue=images',
                  '--key=images.scan']
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  checker:
      build:
        context: analysis
        dockerfile: ./Dockerfile_checker
      #command: [run, '--interval=30','--path-logging=/data/crawler/log/stats.log','--images-url=http://images_server:3000/api/images/', '--queue=images', '--key=images.scan','--amqp-url=amqp://guest:guest@rabbitmq:5672']
      command: verify
      volumes:
         - /dockerfinder/checker/log:/data/crawler/log

#####################################################
###############   DISCOVERY PHASE ####################
#####################################################

  software_server:
    build: discovery/softwareService/software_server
    ports:
      - "3001:3001"
    depends_on:
      - software_db

  software_db:
    image: mongo:3
    volumes:
      - /data/db  # /data/db is the deafult directory where mogno stores the databases.

  webapp:
    build: discovery/webapp/
    restart: on-failure:3
    ports:
      - 80:80
    volumes:
      - /home/dido/github/DockerFinder/discovery/webapp:/code


#####################################################
###############   STORAGE PHASE ####################
#####################################################

  images_server:
    build: storage/images_server
    restart: on-failure:3
    ports:
      - "3000:3000"
    depends_on:
    - images_db

  images_db:
    image: mongo:3
    restart: on-failure:3
    volumes:
      - /data/db
    # /data/db is the deafult directory where mogno container store the databases.


#####################################################
###############   MANAGEMENT PHASE ####################
#####################################################
##
#  monitor:
#    #container_name: monitor
#    build: management
#    ports:
# #      - "3002:3002"
#   build:
#     context: analysis
#     dockerfile: ./Dockerfile_crawler
#
#      orchestrator:
#        build:
#          context: management
#          dockerfile: Dockerfile_orchestrator
  orchestrator:
    build:
      context: management
      dockerfile: ./Dockerfile_orchestrator
    ports:
      - "3003:3003"



# volumes:
#   df-software:
#     external: true
