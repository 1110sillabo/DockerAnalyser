version: "3"

# The docker-compose.yml file defines DockerAnalyser Services
#    1) analysis services: crawler, scanner, rabbitmq, (checker)
#    3) storage services: images_server, images_db

services:

  ###############   ANALYSIS PHASE ####################
  crawler:
    image: diunipisocc/docker-finder:crawler
    build:
     context: analysis
     dockerfile: ./Dockerfile_crawler
    command: [crawl,'--save-url=/data/crawler/lasturl.txt',
                    '--amqp-url=amqp://guest:guest@rabbitmq:5672',
                    '--images-url=http://images_server:3000/api/images/',
                    '--queue=images',
                    '--force-page=True',
                    #'--si=10000',
                    '--random=True',
                    '--fp=1',
                    '--ps=100',
                    '--policy=stars_first',
                    '--min-stars=3',
                    '--min-pulls=0',
                    #'--only-official',
                    '--only-automated',

                    ]
    #,'--si=100'] #, '--fp=100', '--ps=10']
    volumes:
          - crawler_volume:/data/crawler/
    deploy:
      placement:
        constraints:
            - node.hostname==swarm-manager

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    restart: on-failure:3
    ports:
      - 8082:15672
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    deploy:
      placement:
        constraints:
            - node.hostname==swarm-manager

  scanner:
    image: diunipisocc/docker-finder:scanner
    build:
      context: analysis
      args:
        deploy: deploy-package
      dockerfile: ./Dockerfile_scanner
    command: [run, '--images-url=http://images_server:3000/api/images/',
                  '--queue=images',
                  '--key=images.scan',
                  ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    deploy:
      mode: replicated
      replicas: 10
      placement:
        constraints:
            - node.hostname != swarm-manager
      restart_policy:
          condition: on-failure


#   checker:
#       image: diunipisocc/docker-finder:checker
#       build:
#         context: analysis
#         dockerfile: ./Dockerfile_checker
#       command: [run, '--interval=30','--path-logging=/data/crawler/log/stats.log','--images-url=http://images_server:3000/api/images', '--queue=images', '--key=images.scan','--amqp-url=amqp://guest:guest@rabbitmq:5672']
#       #command: verify
#       volumes:
#          - /dockerfinder/checker/log:/data/crawler/log


  # #####################################################
  # ###############   STORAGE PHASE ####################
  # #####################################################
  images_server:
      build: storage/images_server
      image: diunipisocc/docker-finder:images_server
      hostname: images_server
      restart: on-failure:3
      ports:
        - "3000:3000"
      depends_on:
        - images_db
      deploy:
         placement:
            constraints:
               - node.hostname == swarm-manager

  images_db:
      image: mongo:3
      restart: on-failure:3
      hostname: images_db
      volumes:
        -  images_db_volume:/data/db
      deploy:
         placement:
            constraints:
               - node.hostname == swarm-manager


volumes:
  crawler_volume:
  rabbitmq_volume:
  images_db_volume:
